{"version":3,"file":"ngx-paypal.js","sources":["../../src/lib/services/script.service.ts","../../src/lib/services/paypal-script.service.ts","../../src/lib/components/paypal.component.ts","../../src/lib/ngx-paypal.module.ts","../../src/lib/models/paypal-models.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\n\n@Injectable()\nexport class ScriptService {\n\n    constructor(\n        protected zone: NgZone,\n    ) {\n    }\n\n    registerScript(url: string, globalVar: string, onReady: (globalVar: any) => void): void {\n        const existingGlobalVar = (window as any)[globalVar];\n        if (existingGlobalVar) {\n            // global variable is present = script was already loaded\n            this.zone.run(() => {\n                onReady(existingGlobalVar);\n            });\n            return;\n        }\n\n\n        // prepare script elem\n        const scriptElem = document.createElement('script');\n        scriptElem.id = this.getElemId(globalVar);\n        scriptElem.innerHTML = '';\n        scriptElem.onload = () => {\n            this.zone.run(() => {\n                onReady((window as any)[globalVar]);\n            });\n        };\n        scriptElem.src = url;\n        scriptElem.async = true;\n        scriptElem.defer = true;\n\n        // add script to header\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n\n    cleanup(globalVar: string): void {\n        // remove script from DOM\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\n\n        if (scriptElem) {\n            scriptElem.remove();\n        }\n    }\n\n    private getElemId(globalVar: string): string {\n        return `ngx-paypal-script-elem-${globalVar}`;\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { IPayPalUrlConfig, IQueryParam } from '../models/paypal-models';\nimport { ScriptService } from './script.service';\n\n@Injectable()\nexport class PayPalScriptService {\n\n    private readonly paypalWindowName = 'paypal';\n\n\n    constructor(\n        protected scriptService: ScriptService,\n    ) {\n    }\n\n    registerPayPalScript(config: IPayPalUrlConfig, onReady: (payPalApi: any) => void): void {\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n    }\n\n    destroyPayPalScript(): void {\n        this.scriptService.cleanup(this.paypalWindowName);\n    }\n\n    private getUrlForConfig(config: IPayPalUrlConfig): string {\n        const params: IQueryParam[] = [\n            {\n                name: 'client-id',\n                value: config.clientId\n            }\n        ];\n\n        if (config.currency) {\n            params.push({\n                name: 'currency',\n                value: config.currency\n            });\n        }\n\n        if (config.commit) {\n            params.push({\n                name: 'commit',\n                value: config.commit\n            });\n        }\n\n        if (config.vault) {\n            params.push({\n                name: 'vault',\n                value: config.vault\n            });\n        }\n\n        if (config.extraParams) {\n            params.push(...config.extraParams);\n        }\n\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n    }\n\n    private getQueryString(queryParams: IQueryParam[]): string {\n        let queryString = '';\n\n        for (let i = 0; i < queryParams.length; i++) {\n            const queryParam = queryParams[i];\n            if (i === 0) {\n                queryString += '?';\n            } else {\n                queryString += '&';\n            }\n\n            queryString += `${queryParam.name}=${queryParam.value}`;\n        }\n\n        return queryString;\n    }\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport {\n    ICancelCallbackData,\n    IClientAuthorizeCallbackData,\n    ICreateOrderCallbackActions,\n    IInitCallbackData,\n    IOnApproveCallbackActions,\n    IOnApproveCallbackData,\n    IOnClickCallbackActions,\n    IOnInitCallbackActions,\n    IOnShippingChangeActions,\n    IOnShippingChangeData,\n    IPayPalConfig,\n    ICreateSubscriptionCallbackActions,\n    ICreateSubscriptionCallbackData,\n} from '../models/paypal-models';\nimport { PayPalScriptService } from '../services/paypal-script.service';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'ngx-paypal',\n    template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `\n})\nexport class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {\n\n    /**\n     * Configuration for paypal.\n     */\n    @Input() config?: IPayPalConfig;\n\n    /**\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\n     * sharing base configuration. In such a case only a single component may register script.\n     */\n    @Input() registerScript: boolean = true;\n\n    /**\n     * Emitted when paypal script is loaded\n     */\n    @Output() scriptLoaded = new EventEmitter<any>();\n\n    /**\n     * Id of the element where PayPal button will be rendered\n     */\n    public payPalButtonContainerId?: string;\n\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\n\n    private payPalButtonContainerElem?: ElementRef;\n    @ViewChild('payPalButtonContainer', { static: false }) set payPalButtonContainer(content: ElementRef) {\n        this.payPalButtonContainerElem = content;\n    }\n\n    /**\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\n     */\n    private initializePayPal: boolean = true;\n\n    /**\n     * Reference to PayPal global API\n     */\n    private payPal: any;\n\n    constructor(\n        private paypalScriptService: PayPalScriptService,\n        private cdr: ChangeDetectorRef,\n        private ngZone: NgZone\n    ) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.payPalButtonContainerId) {\n            this.payPalButtonContainerId = this.generateElementId();\n        }\n\n        // first time config setup\n        const config = this.config;\n\n        if (changes.config.isFirstChange()) {\n            if (config && this.registerScript) {\n                this.initPayPalScript(config, (payPal) => {\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            }\n        }\n\n        // changes to config\n        if (!changes.config.isFirstChange()) {\n            this.reinitialize(config);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.paypalScriptService.destroyPayPalScript();\n        this.ngUnsubscribe.next();\n        this.ngUnsubscribe.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.doPayPalCheck();\n    }\n\n    customInit(payPal: any): void {\n        this.payPal = payPal;\n        this.doPayPalCheck();\n    }\n\n    reinitialize(config: IPayPalConfig | undefined): void {\n        this.config = config;\n        this.payPal = undefined;\n        this.paypalScriptService.destroyPayPalScript();\n        this.payPalButtonContainerId = this.generateElementId();\n        this.initializePayPal = true;\n\n        if (this.payPalButtonContainerElem) {\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n            }\n        }\n\n        this.cdr.detectChanges();\n\n        if (this.config) {\n            if (!this.payPal) {\n                this.initPayPalScript(this.config, (payPal) => {\n\n                    // store reference to paypal global script\n                    this.payPal = payPal;\n                    this.doPayPalCheck();\n                });\n            } else {\n                this.doPayPalCheck();\n            }\n        }\n    }\n\n\n    private doPayPalCheck(): void {\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n            // make sure that id is also set\n            if (this.payPalButtonContainerElem.nativeElement.id) {\n                this.initializePayPal = false;\n                this.initPayPal(this.config, this.payPal);\n            }\n        }\n    }\n\n    private initPayPalScript(config: IPayPalConfig, initPayPal: (paypal: any) => void): void {\n        this.paypalScriptService.registerPayPalScript({\n            clientId: config.clientId,\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n            currency: config.currency,\n            vault: config.vault,\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n        }, (paypal) => {\n            this.scriptLoaded.next(paypal);\n            initPayPal(paypal);\n        });\n    }\n\n    private generateElementId(): string {\n        return `ngx-captcha-id-${new Date().valueOf()}`;\n    }\n\n    private initPayPal(config: IPayPalConfig, paypal: any): void {\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n        this.ngZone.runOutsideAngular(() => {\n\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n            const createOrder = (data: any, actions: ICreateOrderCallbackActions) => {\n                return this.ngZone.run(() => {\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n                    }\n\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n                    }\n\n                    if (config.createOrderOnClient) {\n                        return actions.order.create(config.createOrderOnClient(data));\n                    }\n\n                    if (config.createOrderOnServer) {\n                        return config.createOrderOnServer(data);\n                    }\n\n                    throw Error(`Invalid state for 'createOrder'.`);\n                });\n            };\n            const createSubscription = (data: ICreateSubscriptionCallbackData, actions: ICreateSubscriptionCallbackActions) => {\n                return this.ngZone.run(() => {\n                    if (config.createSubscription) {\n                        return config.createSubscription(data, actions);\n                    }\n                });\n            };\n            const onShippingChange = (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => {\n                return this.ngZone.run(() => {\n                    if (config.onShippingChange) {\n                        return config.onShippingChange(data, actions);\n                    }\n                });\n            };\n            const buttonsConfig = {\n                style: config.style,\n                onApprove: (data: IOnApproveCallbackData, actions: IOnApproveCallbackActions) => {\n                    return this.ngZone.run(() => {\n                        if (config.onApprove) {\n                            config.onApprove(data, actions);\n                        }\n\n                        // capture on server\n                        if (config.authorizeOnServer) {\n                            return config.authorizeOnServer(data, actions);\n                        }\n\n                        // capture on client\n                        const onClientAuthorization = config.onClientAuthorization;\n                        if (onClientAuthorization) {\n                            actions.order.capture().then((details: IClientAuthorizeCallbackData) => {\n                                this.ngZone.run(() => {\n                                    onClientAuthorization(details);\n                                });\n                            });\n                            return;\n                        }\n                    });\n                },\n                onError: (error: any) => {\n                    this.ngZone.run(() => {\n                        if (config.onError) {\n                            config.onError(error);\n                        }\n                    });\n                },\n                onCancel: (data: ICancelCallbackData, actions: any) => {\n                    this.ngZone.run(() => {\n                        if (config.onCancel) {\n                            config.onCancel(data, actions);\n                        }\n                    });\n                },\n                onClick: (data: any, actions: IOnClickCallbackActions) => {\n                    this.ngZone.run(() => {\n                        if (config.onClick) {\n                            config.onClick(data, actions);\n                        }\n                    });\n                },\n                onInit: (data: IInitCallbackData, actions: IOnInitCallbackActions) => {\n                    this.ngZone.run(() => {\n                        if (config.onInit) {\n                            config.onInit(data, actions);\n                        }\n                    });\n                },\n                // Add the functions if they've been created in the config object\n                // The API only allows one of the two to be set\n                ...((config.createOrderOnClient || config.createOrderOnServer) && { createOrder }),\n                ...(config.createSubscription && { createSubscription }),\n                // The onShippingChange callback cannot be used with subscriptions\n                // so we only add it if it is set\n                ...(config.onShippingChange && { onShippingChange })\n            };\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n        });\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NgxPaypalComponent } from './components/paypal.component';\nimport { ScriptService } from './services/script.service';\nimport { PayPalScriptService } from './services/paypal-script.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxPaypalComponent,\n  ],\n  exports: [\n    NgxPaypalComponent,\n  ],\n  providers: [\n    ScriptService,\n    PayPalScriptService\n  ]\n})\nexport class NgxPayPalModule {\n}\n\n\n","\nexport interface IPayPalConfig {\n    /**\n     * Currency - Defaults to USD if not provided\n     */\n    currency?: string;\n\n    /**\n    * Use when creating order on client\n    */\n    createOrderOnClient?: (data: any) => ICreateOrderRequest;\n\n    /**\n     * Use for creating orders on server. PayPal expects you to return 'orderId' in this method\n     */\n    createOrderOnServer?: (data: any) => Promise<string>;\n\n    /**\n     * Advanced configuration\n     */\n    advanced?: IAdvancedConfiguration;\n\n    /**\n     * Client id\n     */\n    clientId: string;\n\n    /**\n     * Shipping callback\n     * see https://developer.paypal.com/docs/checkout/integration-features/shipping-callback/\n     */\n    onShippingChange?: OnShippingChangeCallback;\n\n    /**\n     * Called when 'onApprove' event occurs\n     */\n    onApprove?: (data: IOnApproveCallbackData, actions: any) => void;\n\n    /**\n    * Called when authorization on client succeeds\n    */\n    onClientAuthorization?: (authorization: IClientAuthorizeCallbackData) => void;\n\n    /**\n     * Implement for authorizing on server side\n     */\n    authorizeOnServer?: (data: IOnApproveCallbackData, actions: any) => Promise<any>;\n\n    /**\n     * Button style configuration\n     */\n    style?: IPayPalButtonStyle;\n\n    /**\n     * Error handler\n     */\n    onError?: (err: any) => void;\n\n    /**\n     * Click handler\n     */\n    onClick?: (data: any, actions: IOnClickCallbackActions) => void;\n\n    /**\n     * Cancel handler\n     */\n    onCancel?: (data: ICancelCallbackData, actions: any) => void;\n\n    /**\n     * Init handler.\n     * can be used for validation, see: https://developer.paypal.com/docs/checkout/integration-features/validation/#\n     */\n    onInit?: (data: IInitCallbackData, actions: IOnInitCallbackActions) => void;\n\n    /**\n     * Create subscription handler\n     * https://developer.paypal.com/docs/subscriptions/integrate/\n     *\n     * Note: the vault property in the advanced configuration also has to be set to true\n     */\n    createSubscription?: (data: ICreateSubscriptionCallbackData, actions: ICreateSubscriptionCallbackActions) => void;\n\n    /**\n     * Vault - must be set to true when creating subscriptions\n     */\n    vault?: TrueFalse;\n}\n\nexport type TrueFalse = 'true' | 'false';\n\nexport interface IPayPalUrlConfig {\n    clientId: string;\n    currency?: string;\n    commit?: TrueFalse;\n    vault?: TrueFalse;\n    extraParams?: IQueryParam[];\n}\n\nexport interface IOrderDetails {\n    create_time: string;\n    update_time: string;\n    id: string;\n    intent: OrderIntent;\n    payer: IPayer;\n    status: OrderStatus;\n    links: ILinkDescription[];\n    purchase_units: IPurchaseUnit[];\n}\n\nexport interface IClientAuthorizeCallbackData extends IOrderDetails {\n    links: ILinkDescription[];\n}\n\nexport interface ILinkDescription {\n    href: string;\n    rel: String;\n    method?: LinkMethod;\n}\n\nexport interface IQueryParam {\n    name: string;\n    value: string;\n}\n\nexport type OnShippingChangeCallback = (data: IOnShippingChangeData, actions: IOnShippingChangeActions) => any;\n\nexport interface IOnShippingChangeData {\n    paymentToken: string;\n    shipping_address: any;\n    selected_shipping_method?: any;\n}\n\nexport interface IOnShippingChangeActions {\n    resolve: () => any;\n    reject: () => any;\n    patch: () => any;\n}\n\nexport type LinkMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'PATCH';\n\nexport interface IAdvancedConfiguration {\n    commit?: TrueFalse;\n    extraQueryParams?: IQueryParam[];\n}\n\nexport interface IOnApproveCallbackData {\n    orderID: string;\n    payerID: string;\n    subscriptionID: string;\n}\n\nexport interface ICreateOrderCallbackActions {\n    order: {\n        create: (order: ICreateOrderRequest) => Promise<any>;\n    };\n}\n\nexport interface ICancelCallbackData {\n    orderID: string;\n}\n\nexport interface IOnApproveCallbackActions {\n    redirect: () => void;\n    restart: () => void;\n    order: {\n        authorize: () => Promise<any>;\n        capture: () => Promise<any>;\n        get: () => Promise<IOrderDetails>;\n        patch: () => Promise<any>;\n    };\n}\n\nexport interface IOnInitCallbackActions {\n    enable: () => void;\n    disable: () => void;\n}\n\nexport interface ICreateSubscriptionCallbackActions {\n    subscription: {\n        create: (subscription: ICreateSubscriptionRequest) => Promise<any>;\n    };\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface IInitCallbackData {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface ICreateSubscriptionCallbackData {\n}\n\nexport interface IOnClickCallbackActions {\n    resolve: () => void;\n    reject: () => void;\n}\n\nexport interface IPayPalButtonStyle {\n    label?: 'paypal' | 'checkout' | 'pay' | 'installment' | 'buynow';\n    size?: 'small' | 'medium' | 'large' | 'responsive';\n    shape?: 'pill' | 'rect';\n    color?: 'gold' | 'blue' | 'silver' | 'white' | 'black';\n    layout?: 'horizontal' | 'vertical';\n    tagline?: boolean;\n    height?: number;\n}\n\nexport interface ICreateOrderRequest {\n    intent: OrderIntent;\n    purchase_units: IPurchaseUnit[];\n\n    payer?: IPayer;\n    application_context?: IApplicationContext;\n\n}\n\nexport interface ICreateSubscriptionRequest {\n    plan_id: string;\n    quantity?: number;\n    plan?: any;\n    subscriber?: any;\n    application_context?: any;\n}\n\nexport interface IPayer {\n    name?: IPartyName;\n    email_address?: string;\n    payer_id?: string;\n    birth_date?: string;\n    tax_info?: ITaxInfo;\n    address?: IAddressPortable;\n    phone?: IPhone;\n}\n\nexport interface IApplicationContext {\n    brand_name?: string;\n    locale?: string;\n    landing_page?: PaypalLandingPage;\n    shipping_preference?: ShippingPreference;\n    user_action?: PayPalUserAction;\n    payment_method?: IPaymentMethod;\n    return_url?: string;\n    cancel_url?: string;\n}\n\nexport interface IPaymentMethod {\n    payer_selected?: PayerSelected;\n    payee_preferred?: PayeePreferred;\n}\n\nexport type PayeePreferred = 'UNRESTRICTED' | 'IMMEDIATE_PAYMENT_REQUIRED';\n\nexport type PayerSelected = 'PAYPAL_CREDIT' | 'PAYPAL';\n\nexport type PayPalUserAction = 'CONTINUE' | 'PAY_NOW';\n\nexport type ShippingPreference = 'GET_FROM_FILE' | 'NO_SHIPPING' | 'SET_PROVIDED_ADDRESS';\n\nexport type PaypalLandingPage = 'LOGIN' | 'BILLING';\n\nexport type OrderIntent = 'CAPTURE' | 'AUTHORIZE';\n\nexport type DisbursementMode = 'INSTANT' | 'DELAYED';\n\nexport type ItemCategory = 'DIGITAL_GOODS' | 'PHYSICAL_GOODS';\n\nexport type PhoneType = 'FAX' | 'HOME' | 'MOBILE' | 'OTHER' | 'PAGER';\n\nexport type TaxIdType = 'BR_CPF' | 'BR_CNPJ';\n\nexport interface IPhone {\n    phone_type?: PhoneType;\n    phone_number?: IPhoneNumber;\n}\n\nexport interface ITaxInfo {\n    tax_id: string;\n    tax_id_type: TaxIdType;\n}\n\nexport interface IPhoneNumber {\n    national_number: string;\n}\n\nexport interface IPurchaseUnit {\n    amount: IUnitAmount;\n\n    reference_id?: string;\n    payee?: IPayee;\n    payment_instruction?: IPaymentInstructions;\n    description?: string;\n    custom_id?: string;\n    invoice_id?: string;\n    soft_descriptor?: string;\n    items: ITransactionItem[];\n    shipping?: IShipping;\n}\n\nexport interface IPayee {\n    email_address?: string;\n    merchant_id?: string;\n}\n\nexport interface IPaymentInstructions {\n    platform_fees?: IPlatformFee[];\n    disbursement_mode?: DisbursementMode;\n}\n\nexport interface IPlatformFee {\n    amount: IUnitAmount;\n    payee?: IPayee;\n}\n\nexport interface ITransactionItem {\n    name: string;\n    unit_amount: IUnitAmount;\n    quantity: string;\n\n    description?: string;\n    sku?: string;\n    category?: ItemCategory;\n    tax?: ITax;\n}\n\nexport interface ITax {\n    currency_code: string;\n    value: string;\n}\n\nexport interface IUnitAmount {\n    currency_code: string;\n    value: string;\n    breakdown?: IUnitBreakdown;\n}\n\nexport interface IMoney {\n    currency_code: string;\n    value: string;\n}\n\nexport interface IUnitBreakdown {\n    item_total?: IUnitAmount;\n    shipping?: IUnitAmount;\n    handling?: IUnitAmount;\n    tax_total?: IUnitAmount;\n    insurance?: IUnitAmount;\n    shipping_discount?: IUnitAmount;\n    discount?: IMoney;\n}\n\nexport interface IPartyName {\n    prefix?: string;\n    given_name?: string;\n    surname?: string;\n    middle_name?: string;\n    suffix?: string;\n    alternate_full_name?: string;\n    full_name?: string;\n}\n\nexport interface IAddressPortable {\n    country_code: string;\n\n    address_line_1?: string;\n    address_line_2?: string;\n    admin_area_2?: string;\n    admin_area_1?: string;\n    postal_code?: string;\n}\n\nexport interface IShipping {\n    name?: IPartyName;\n    address?: IAddressPortable;\n}\n\nexport type OrderStatus = 'APPROVED' | 'SAVED' | 'CREATED' | 'VOIDED' | 'COMPLETED';\n\n\n"],"names":[],"mappings":"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"}